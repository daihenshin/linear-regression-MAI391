# !conda install bs4==4.10.0 -y
# !pip install lxml==4.6.4
# !conda install html5lib==1.1 -y
# !pip install requests==2.26.0


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the data
data = pd.read_csv(r"C:\Users\daihe\OneDrive - 7t12kn\Documents\winequality-white.csv", sep=';') # sửa nguồn dữ liệu vào ( file csv)

# Load feature names
with open(r"C:\Users\daihe\OneDrive - 7t12kn\Documents\winequality.names", 'r') as f: # sửa nguồn dữ liệu ( file names)
    feature_names = [line.strip() for line in f if line.strip()]

# Assuming the last column is the target variable (quality)
X = data.iloc[:, :-1]
y = data.iloc[:, -1]

# Illustrate the data
plt.figure(figsize=(12, 8))
for i in range(X.shape[1]):
    plt.subplot(3, 4, i+1)
    plt.scatter(X.iloc[:, i], y, alpha=0.5)
    plt.xlabel(feature_names[i])
    plt.ylabel('Quality')
    plt.title(f'{feature_names[i]} vs Quality')
plt.tight_layout()
plt.show()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean squared error: {mse:.2f}")
print(f"R-squared score: {r2:.2f}")

# Print feature importances
for name, coef in zip(feature_names, model.coef_):
    print(f"{name}: {coef:.4f}")

